{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/sudharshan/Documents/classyfyed/classyfyed-demo/Frontend/models/Otp.ts"],"sourcesContent":["import mongoose, { Schema, models } from 'mongoose';\n\nconst OtpSchema = new Schema({\n  email: { type: String, required: true, unique: true },\n  name: String,\n  otp: { type: Number, required: true },\n});\n\nexport default models.Otp || mongoose.model('Otp', OtpSchema);"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,YAAY,IAAI,yGAAA,CAAA,SAAM,CAAC;IAC3B,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,MAAM;IACN,KAAK;QAAE,MAAM;QAAQ,UAAU;IAAK;AACtC;uCAEe,yGAAA,CAAA,SAAM,CAAC,GAAG,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,OAAO","debugId":null}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["file:///Users/sudharshan/Documents/classyfyed/classyfyed-demo/Frontend/lib/mongodb.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI!;\n\nif (!MONGODB_URI) throw new Error('MONGODB_URI is not defined in .env.local');\n\nlet isConnected = false;\n\nexport const connectToDB = async () => {\n  if (isConnected) return;\n\n  try {\n    await mongoose.connect(MONGODB_URI);\n    isConnected = true;\n    console.log('✅ Connected to MongoDB');\n  } catch (error) {\n    console.error('❌ MongoDB connection error:', error);\n    throw error;\n  }\n};\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa,MAAM,IAAI,MAAM;AAElC,IAAI,cAAc;AAEX,MAAM,cAAc;IACzB,IAAI,aAAa;IAEjB,IAAI;QACF,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QACvB,cAAc;QACd,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file:///Users/sudharshan/Documents/classyfyed/classyfyed-demo/Frontend/app/api/verify-otp/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport Otp from \"@/models/Otp\";\nimport { connectToDB } from \"@/lib/mongodb\";\n\nexport async function POST(req: NextRequest) {\n  const body = await req.json();\n  const { email, otp } = body;\n\n  if (!email || !otp) {\n    return NextResponse.json({ message: \"Email and OTP are required\" }, { status: 400 });\n  }\n\n  try {\n    await connectToDB();\n\n    const otpRecord = await Otp.findOne({ email });\n    if (!otpRecord) {\n      return NextResponse.json({ message: \"OTP not found\" }, { status: 404 });\n    }\n\n    if (otpRecord.otp !== Number(otp)) {\n      return NextResponse.json({ message: \"Invalid OTP\" }, { status: 401 });\n    }\n\n    // Optionally add expiry logic here.\n\n    await Otp.deleteOne({ email });\n\n    return NextResponse.json({ message: \"OTP verified successfully\", success: true });\n  } catch (err) {\n    console.error(err);\n    return NextResponse.json({ message: \"Failed to verify OTP\", success: false }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,GAAgB;IACzC,MAAM,OAAO,MAAM,IAAI,IAAI;IAC3B,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG;IAEvB,IAAI,CAAC,SAAS,CAAC,KAAK;QAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA6B,GAAG;YAAE,QAAQ;QAAI;IACpF;IAEA,IAAI;QACF,MAAM,CAAA,GAAA,gHAAA,CAAA,cAAW,AAAD;QAEhB,MAAM,YAAY,MAAM,+GAAA,CAAA,UAAG,CAAC,OAAO,CAAC;YAAE;QAAM;QAC5C,IAAI,CAAC,WAAW;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAgB,GAAG;gBAAE,QAAQ;YAAI;QACvE;QAEA,IAAI,UAAU,GAAG,KAAK,OAAO,MAAM;YACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAc,GAAG;gBAAE,QAAQ;YAAI;QACrE;QAEA,oCAAoC;QAEpC,MAAM,+GAAA,CAAA,UAAG,CAAC,SAAS,CAAC;YAAE;QAAM;QAE5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAA6B,SAAS;QAAK;IACjF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAwB,SAAS;QAAM,GAAG;YAAE,QAAQ;QAAI;IAC9F;AACF","debugId":null}}]
}