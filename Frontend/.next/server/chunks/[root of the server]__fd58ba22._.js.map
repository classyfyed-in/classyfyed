{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/sudharshan/Documents/classyfyed/classyfyed-demo/Frontend/lib/encryption.ts"],"sourcesContent":["import { createCipheriv, randomBytes, createDecipheriv } from 'crypto';\n\nconst secret = process.env.ENCRYPTION_SECRET!;\nconst ivLength = 16;\n\nexport function encrypt(text: string): string {\n  const iv = randomBytes(ivLength);\n  const cipher = createCipheriv('aes-256-cbc', Buffer.from(secret), iv);\n  let encrypted = cipher.update(text, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n  return iv.toString('hex') + ':' + encrypted;\n}\n\nexport function decrypt(text: string): string {\n  const [ivHex, encryptedData] = text.split(':');\n  const decipher = createDecipheriv(\n    'aes-256-cbc',\n    Buffer.from(secret),\n    Buffer.from(ivHex, 'hex')\n  );\n  let decrypted = decipher.update(encryptedData, 'hex', 'utf8');\n  decrypted += decipher.final('utf8');\n  return decrypted;\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,SAAS,QAAQ,GAAG,CAAC,iBAAiB;AAC5C,MAAM,WAAW;AAEV,SAAS,QAAQ,IAAY;IAClC,MAAM,KAAK,CAAA,GAAA,qGAAA,CAAA,cAAW,AAAD,EAAE;IACvB,MAAM,SAAS,CAAA,GAAA,qGAAA,CAAA,iBAAc,AAAD,EAAE,eAAe,OAAO,IAAI,CAAC,SAAS;IAClE,IAAI,YAAY,OAAO,MAAM,CAAC,MAAM,QAAQ;IAC5C,aAAa,OAAO,KAAK,CAAC;IAC1B,OAAO,GAAG,QAAQ,CAAC,SAAS,MAAM;AACpC;AAEO,SAAS,QAAQ,IAAY;IAClC,MAAM,CAAC,OAAO,cAAc,GAAG,KAAK,KAAK,CAAC;IAC1C,MAAM,WAAW,CAAA,GAAA,qGAAA,CAAA,mBAAgB,AAAD,EAC9B,eACA,OAAO,IAAI,CAAC,SACZ,OAAO,IAAI,CAAC,OAAO;IAErB,IAAI,YAAY,SAAS,MAAM,CAAC,eAAe,OAAO;IACtD,aAAa,SAAS,KAAK,CAAC;IAC5B,OAAO;AACT","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///Users/sudharshan/Documents/classyfyed/classyfyed-demo/Frontend/lib/mongodb.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI!;\n\nif (!MONGODB_URI) throw new Error('MONGODB_URI is not defined in .env.local');\n\nlet isConnected = false;\n\nexport const connectToDB = async () => {\n  if (isConnected) return;\n\n  try {\n    await mongoose.connect(MONGODB_URI);\n    isConnected = true;\n    console.log('✅ Connected to MongoDB');\n  } catch (error) {\n    console.error('❌ MongoDB connection error:', error);\n    throw error;\n  }\n};\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa,MAAM,IAAI,MAAM;AAElC,IAAI,cAAc;AAEX,MAAM,cAAc;IACzB,IAAI,aAAa;IAEjB,IAAI;QACF,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QACvB,cAAc;QACd,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":["file:///Users/sudharshan/Documents/classyfyed/classyfyed-demo/Frontend/models/Verify.ts"],"sourcesContent":["import mongoose, { Schema, models } from 'mongoose';\n\nconst UserSchema = new Schema({\n  email: { type: String, required: true, unique: true },\n  name: String,\n  isVerified: { type: Boolean, default: false },\n});\n\nexport default models.Verify || mongoose.model('Verify', UserSchema);"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAAC;IAC5B,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,MAAM;IACN,YAAY;QAAE,MAAM;QAAS,SAAS;IAAM;AAC9C;uCAEe,yGAAA,CAAA,SAAM,CAAC,MAAM,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,UAAU","debugId":null}},
    {"offset": {"line": 265, "column": 0}, "map": {"version":3,"sources":["file:///Users/sudharshan/Documents/classyfyed/classyfyed-demo/Frontend/app/api/send-email/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { encrypt } from '@/lib/encryption';\nimport { connectToDB } from '@/lib/mongodb';\nimport Verify from '@/models/Verify';\nimport nodemailer from 'nodemailer';\n\nexport async function POST(req: Request) {\n  const { email, name } = await req.json();\n\n  try {\n    await connectToDB();\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const verify = await Verify.findOneAndUpdate(\n      { email },\n      { $setOnInsert: { name, isVerified: false } },\n      { upsert: true, new: true }\n    );\n\n    const payload = JSON.stringify({\n      email,\n      expiresAt: Date.now() + 1000 * 60 * 30, // valid 30 mins\n    });\n\n    const token = encrypt(payload);\n    const verifyUrl = `https://www.classyfyed.in/api/verify?token=${encodeURIComponent(token)}`;\n\n    const transporter = nodemailer.createTransport({\n      host: 'smtp.zoho.in',\n      port: 587,\n      secure: false,\n      auth: {\n        user: process.env.ZOHO_USER!,\n        pass: process.env.ZOHO_PASS!,\n      },\n    });\n\n    await transporter.sendMail({\n        from: `\"Classyfyed\" <${process.env.ZOHO_USER}>`,\n        to: email,\n        subject: 'Welcome to Classyfyed – Verify Your Email to Get Started!',\n        html: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #eaeaea; border-radius: 8px; background-color: #ffffff;\">\n            <h2 style=\"color: #194EB4;\">Welcome to <span style=\"color: #AC67DE;\">Classyfyed</span>!</h2>\n            <p style=\"font-size: 16px; color: #333333;\">\n              Thank you for signing up. To complete your registration and start using Classyfyed, please verify your email address by clicking the button below:\n            </p>\n            <div style=\"text-align: center; margin: 30px 0;\">\n              <a href=\"${verifyUrl}\" style=\"background: linear-gradient(to right, #194EB4, #AC67DE); color: white; padding: 14px 28px; text-decoration: none; border-radius: 6px; display: inline-block; font-size: 16px;\">\n                Verify Email\n              </a>\n            </div>\n            <p style=\"font-size: 14px; color: #555555;\">\n              If the button above doesn’t work, copy and paste this link into your browser:<br/>\n              <a href=\"${verifyUrl}\" style=\"color: #194EB4;\">${verifyUrl}</a>\n            </p>\n            <hr style=\"margin: 30px 0; border: none; border-top: 1px solid #eaeaea;\">\n            <p style=\"font-size: 12px; color: #999999; text-align: center;\">\n              © ${new Date().getFullYear()} Classyfyed. All rights reserved.\n            </p>\n          </div>\n        `,\n      });\n      \n\n    return NextResponse.json({ message: 'Verification email sent' });\n  } catch (err) {\n    console.error(err);\n    return NextResponse.json({ error: 'Failed to send email' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEO,eAAe,KAAK,GAAY;IACrC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;IAEtC,IAAI;QACF,MAAM,CAAA,GAAA,gHAAA,CAAA,cAAW,AAAD;QAEhB,6DAA6D;QAC7D,MAAM,SAAS,MAAM,kHAAA,CAAA,UAAM,CAAC,gBAAgB,CAC1C;YAAE;QAAM,GACR;YAAE,cAAc;gBAAE;gBAAM,YAAY;YAAM;QAAE,GAC5C;YAAE,QAAQ;YAAM,KAAK;QAAK;QAG5B,MAAM,UAAU,KAAK,SAAS,CAAC;YAC7B;YACA,WAAW,KAAK,GAAG,KAAK,OAAO,KAAK;QACtC;QAEA,MAAM,QAAQ,CAAA,GAAA,mHAAA,CAAA,UAAO,AAAD,EAAE;QACtB,MAAM,YAAY,CAAC,2CAA2C,EAAE,mBAAmB,QAAQ;QAE3F,MAAM,cAAc,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;YAC7C,MAAM;YACN,MAAM;YACN,QAAQ;YACR,MAAM;gBACJ,MAAM,QAAQ,GAAG,CAAC,SAAS;gBAC3B,MAAM,QAAQ,GAAG,CAAC,SAAS;YAC7B;QACF;QAEA,MAAM,YAAY,QAAQ,CAAC;YACvB,MAAM,CAAC,cAAc,EAAE,QAAQ,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;YAC/C,IAAI;YACJ,SAAS;YACT,MAAM,CAAC;;;;;;;uBAOQ,EAAE,UAAU;;;;;;uBAMZ,EAAE,UAAU,0BAA0B,EAAE,UAAU;;;;gBAIzD,EAAE,IAAI,OAAO,WAAW,GAAG;;;QAGnC,CAAC;QACH;QAGF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA0B;IAChE,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC5E;AACF","debugId":null}}]
}