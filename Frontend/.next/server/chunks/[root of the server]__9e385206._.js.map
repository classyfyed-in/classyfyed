{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/sudharshan/Documents/classyfyed/classyfyed-demo/Frontend/lib/mongodb.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI!;\n\nif (!MONGODB_URI) throw new Error('MONGODB_URI is not defined in .env.local');\n\nlet isConnected = false;\n\nexport const connectToDB = async () => {\n  if (isConnected) return;\n\n  try {\n    await mongoose.connect(MONGODB_URI);\n    isConnected = true;\n    console.log('✅ Connected to MongoDB');\n  } catch (error) {\n    console.error('❌ MongoDB connection error:', error);\n    throw error;\n  }\n};\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa,MAAM,IAAI,MAAM;AAElC,IAAI,cAAc;AAEX,MAAM,cAAc;IACzB,IAAI,aAAa;IAEjB,IAAI;QACF,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QACvB,cAAc;QACd,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 93, "column": 0}, "map": {"version":3,"sources":["file:///Users/sudharshan/Documents/classyfyed/classyfyed-demo/Frontend/models/Verify.ts"],"sourcesContent":["import mongoose, { Schema, models } from 'mongoose';\n\nconst UserSchema = new Schema({\n  email: { type: String, required: true, unique: true },\n  name: String,\n  isVerified: { type: Boolean, default: false },\n});\n\nexport default models.Verify || mongoose.model('Verify', UserSchema);"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAAC;IAC5B,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,MAAM;IACN,YAAY;QAAE,MAAM;QAAS,SAAS;IAAM;AAC9C;uCAEe,yGAAA,CAAA,SAAM,CAAC,MAAM,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,UAAU","debugId":null}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file:///Users/sudharshan/Documents/classyfyed/classyfyed-demo/Frontend/app/api/check/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { connectToDB } from '@/lib/mongodb';\nimport Verify from '@/models/Verify';\n\nexport async function POST(req: Request) {\n  try {\n    await connectToDB();\n\n    const { email } = await req.json();\n\n    if (!email) {\n      return NextResponse.json({ error: 'Email is required' }, { status: 400 });\n    }\n\n    const verify = await Verify.findOne({ email });\n\n    if (!verify) {\n      return NextResponse.json({ error: 'Verification record not found' }, { status: 404 });\n    }\n\n    if (verify.isVerified) {\n      return NextResponse.json({ success: true, message: 'Email already verified' }, { status: 200 });\n    } else {\n      return NextResponse.json({ success: false, message: 'Email not verified yet' }, { status: 200 });\n    }\n  } catch (error) {\n    console.error('[VERIFY_POST_ERROR]', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,CAAA,GAAA,gHAAA,CAAA,cAAW,AAAD;QAEhB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,IAAI;QAEhC,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAoB,GAAG;gBAAE,QAAQ;YAAI;QACzE;QAEA,MAAM,SAAS,MAAM,kHAAA,CAAA,UAAM,CAAC,OAAO,CAAC;YAAE;QAAM;QAE5C,IAAI,CAAC,QAAQ;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAgC,GAAG;gBAAE,QAAQ;YAAI;QACrF;QAEA,IAAI,OAAO,UAAU,EAAE;YACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAM,SAAS;YAAyB,GAAG;gBAAE,QAAQ;YAAI;QAC/F,OAAO;YACL,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAO,SAAS;YAAyB,GAAG;gBAAE,QAAQ;YAAI;QAChG;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF","debugId":null}}]
}