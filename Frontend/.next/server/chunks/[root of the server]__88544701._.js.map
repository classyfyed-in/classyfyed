{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/sudharshan/Documents/classyfyed/classyfyed-demo/Frontend/lib/encryption.ts"],"sourcesContent":["import { createCipheriv, randomBytes, createDecipheriv } from 'crypto';\n\nconst secret = process.env.ENCRYPTION_SECRET!;\nconst ivLength = 16;\n\nexport function encrypt(text: string): string {\n  const iv = randomBytes(ivLength);\n  const cipher = createCipheriv('aes-256-cbc', Buffer.from(secret), iv);\n  let encrypted = cipher.update(text, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n  return iv.toString('hex') + ':' + encrypted;\n}\n\nexport function decrypt(text: string): string {\n  const [ivHex, encryptedData] = text.split(':');\n  const decipher = createDecipheriv(\n    'aes-256-cbc',\n    Buffer.from(secret),\n    Buffer.from(ivHex, 'hex')\n  );\n  let decrypted = decipher.update(encryptedData, 'hex', 'utf8');\n  decrypted += decipher.final('utf8');\n  return decrypted;\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,SAAS,QAAQ,GAAG,CAAC,iBAAiB;AAC5C,MAAM,WAAW;AAEV,SAAS,QAAQ,IAAY;IAClC,MAAM,KAAK,CAAA,GAAA,qGAAA,CAAA,cAAW,AAAD,EAAE;IACvB,MAAM,SAAS,CAAA,GAAA,qGAAA,CAAA,iBAAc,AAAD,EAAE,eAAe,OAAO,IAAI,CAAC,SAAS;IAClE,IAAI,YAAY,OAAO,MAAM,CAAC,MAAM,QAAQ;IAC5C,aAAa,OAAO,KAAK,CAAC;IAC1B,OAAO,GAAG,QAAQ,CAAC,SAAS,MAAM;AACpC;AAEO,SAAS,QAAQ,IAAY;IAClC,MAAM,CAAC,OAAO,cAAc,GAAG,KAAK,KAAK,CAAC;IAC1C,MAAM,WAAW,CAAA,GAAA,qGAAA,CAAA,mBAAgB,AAAD,EAC9B,eACA,OAAO,IAAI,CAAC,SACZ,OAAO,IAAI,CAAC,OAAO;IAErB,IAAI,YAAY,SAAS,MAAM,CAAC,eAAe,OAAO;IACtD,aAAa,SAAS,KAAK,CAAC;IAC5B,OAAO;AACT","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///Users/sudharshan/Documents/classyfyed/classyfyed-demo/Frontend/lib/mongodb.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI!;\n\nif (!MONGODB_URI) throw new Error('MONGODB_URI is not defined in .env.local');\n\nlet isConnected = false;\n\nexport const connectToDB = async () => {\n  if (isConnected) return;\n\n  try {\n    await mongoose.connect(MONGODB_URI);\n    isConnected = true;\n    console.log('✅ Connected to MongoDB');\n  } catch (error) {\n    console.error('❌ MongoDB connection error:', error);\n    throw error;\n  }\n};\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa,MAAM,IAAI,MAAM;AAElC,IAAI,cAAc;AAEX,MAAM,cAAc;IACzB,IAAI,aAAa;IAEjB,IAAI;QACF,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QACvB,cAAc;QACd,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":["file:///Users/sudharshan/Documents/classyfyed/classyfyed-demo/Frontend/models/Verify.ts"],"sourcesContent":["import mongoose, { Schema, models } from 'mongoose';\n\nconst UserSchema = new Schema({\n  email: { type: String, required: true, unique: true },\n  name: String,\n  isVerified: { type: Boolean, default: false },\n});\n\nexport default models.Verify || mongoose.model('Verify', UserSchema);"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAAC;IAC5B,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,MAAM;IACN,YAAY;QAAE,MAAM;QAAS,SAAS;IAAM;AAC9C;uCAEe,yGAAA,CAAA,SAAM,CAAC,MAAM,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,UAAU","debugId":null}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":["file:///Users/sudharshan/Documents/classyfyed/classyfyed-demo/Frontend/app/api/verify/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { decrypt } from '@/lib/encryption';\nimport { connectToDB } from '@/lib/mongodb';\nimport Verify from '@/models/Verify';\nexport async function GET(req: Request) {\n  const { searchParams } = new URL(req.url);\n  const token = searchParams.get('token');\n\n  if (!token) {\n    return NextResponse.json({ error: 'Missing token' }, { status: 400 });\n  }\n\n  try {\n    const decrypted = decrypt(decodeURIComponent(token));\n    const { email, expiresAt } = JSON.parse(decrypted);\n\n    if (Date.now() > expiresAt) {\n      return NextResponse.json({ error: 'Token expired' }, { status: 400 });\n    }\n\n    await connectToDB();\n    const user = await Verify.findOneAndUpdate(\n      { email },\n      { isVerified: true },\n      { new: true }\n    );\n\n    if (!user) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    return NextResponse.json({ message: 'Email verified successfully' });\n  } catch (err) {\n    console.error(err);\n    return NextResponse.json({ error: 'Invalid token' }, { status: 400 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AACO,eAAe,IAAI,GAAY;IACpC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG;IACxC,MAAM,QAAQ,aAAa,GAAG,CAAC;IAE/B,IAAI,CAAC,OAAO;QACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAgB,GAAG;YAAE,QAAQ;QAAI;IACrE;IAEA,IAAI;QACF,MAAM,YAAY,CAAA,GAAA,mHAAA,CAAA,UAAO,AAAD,EAAE,mBAAmB;QAC7C,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,KAAK,KAAK,CAAC;QAExC,IAAI,KAAK,GAAG,KAAK,WAAW;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAgB,GAAG;gBAAE,QAAQ;YAAI;QACrE;QAEA,MAAM,CAAA,GAAA,gHAAA,CAAA,cAAW,AAAD;QAChB,MAAM,OAAO,MAAM,kHAAA,CAAA,UAAM,CAAC,gBAAgB,CACxC;YAAE;QAAM,GACR;YAAE,YAAY;QAAK,GACnB;YAAE,KAAK;QAAK;QAGd,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA8B;IACpE,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAgB,GAAG;YAAE,QAAQ;QAAI;IACrE;AACF","debugId":null}}]
}